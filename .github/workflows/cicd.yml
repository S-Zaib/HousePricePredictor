name: CI/CD Pipeline

on:
  push:
    branches: [ main, test, dev ]
  pull_request:
    branches: [ main, test, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    # Cache pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r allrequirements.txt
        pip install pytest flake8
    # Reference: https://michaelcurrin.github.io/dev-cheatsheets/cheatsheets/python/linting/flake8.html 
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set environment
      run: |
        if [ ${{ github.ref }} == 'refs/heads/main' ]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
        elif [ ${{ github.ref }} == 'refs/heads/test' ]; then
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
        fi
    
    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/
    - name: List directory contents
      if: failure()
      run: |
        ls -R
        pwd

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "No deployment configured for branch ${{ github.ref }}"
          fi

      - name: Debug Information
        if: always()
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "Vercel CLI Version:"
          vercel --version